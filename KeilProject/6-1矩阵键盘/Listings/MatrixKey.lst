C51 COMPILER V9.54   MATRIXKEY                                                             08/08/2023 17:41:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MATRIXKEY
OBJECT MODULE PLACED IN .\Objects\MatrixKey.obj
COMPILER INVOKED BY: F:\Keli5\C51\BIN\C51.EXE MatrixKey.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\M
                    -atrixKey.lst) TABS(2) OBJECT(.\Objects\MatrixKey.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Delay1.h"
   3          unsigned char MatrixKey()
   4          {
   5   1         unsigned char KeyNumber =0;//局部变量使用要赋初值
   6   1        //这个是为了用于区分键盘的每一个编号 
   7   1        
   8   1        // 扫描第一列的键盘
   9   1           P1=0xFF;//此时P1全部置高电平
  10   1           P1_3=0;//数字键盘的第一列全部置0
  11   1          //s1按键的检测
  12   1           if(P1_7==0)
  13   1           {//检测松手的几个基本函数 
  14   2           Delay1(10);while(P1_7==0);Delay1(20);KeyNumber=1;}     
  15   1           if(P1_6==0)
  16   1           {//检测松手的几个基本函数 
  17   2           Delay1(10);while(P1_6==0);Delay1(20);KeyNumber=5;}      
  18   1           if(P1_5==0)
  19   1           {//检测松手的几个基本函数 
  20   2           Delay1(10);while(P1_5==0);Delay1(20);KeyNumber=9;} 
  21   1           if(P1_4==0)
  22   1           {//检测松手的几个基本函数 
  23   2           Delay1(10);while(P1_4==0);Delay1(20);KeyNumber=13;}  
  24   1        
  25   1           // 扫描第二列的键盘
  26   1           P1=0xFF;//此时P1全部置高电平
  27   1           P1_2=0;//数字键盘的第二列全部置0
  28   1          //s1按键的检测
  29   1           if(P1_7==0)
  30   1           {//检测松手的几个基本函数 
  31   2           Delay1(10);while(P1_7==0);Delay1(20);KeyNumber=2;}     
  32   1           if(P1_6==0)
  33   1           {//检测松手的几个基本函数 
  34   2           Delay1(10);while(P1_6==0);Delay1(20);KeyNumber=6;}      
  35   1           if(P1_5==0)
  36   1           {//检测松手的几个基本函数 
  37   2           Delay1(10);while(P1_5==0);Delay1(20);KeyNumber=10;}  
  38   1           if(P1_4==0)
  39   1           {//检测松手的几个基本函数 
  40   2           Delay1(10);while(P1_4==0);Delay1(20);KeyNumber=14;}  
  41   1           
  42   1           // 扫描第三列的键盘，每一列连接的代号
  43   1           P1=0xFF;//此时P1全部置高电平
  44   1           P1_1=0;//数字键盘的第一列全部置0
  45   1          //s1按键的检测
  46   1           if(P1_7==0)
  47   1           {//检测松手的几个基本函数 
  48   2           Delay1(10);while(P1_7==0);Delay1(20);KeyNumber=3;}     
  49   1           if(P1_6==0)
  50   1           {//检测松手的几个基本函数 
  51   2           Delay1(10);while(P1_6==0);Delay1(20);KeyNumber=7;}      
  52   1           if(P1_5==0)
  53   1           {//检测松手的几个基本函数 
  54   2           Delay1(10);while(P1_5==0);Delay1(20);KeyNumber=11;}  
C51 COMPILER V9.54   MATRIXKEY                                                             08/08/2023 17:41:19 PAGE 2   

  55   1           if(P1_4==0)
  56   1           {//检测松手的几个基本函数 
  57   2           Delay1(10);while(P1_4==0);Delay1(20);KeyNumber=15;}  
  58   1           
  59   1           // 扫描第一列的键盘
  60   1           P1=0xFF;//此时P1全部置高电平
  61   1           P1_0=0;//数字键盘的第一列全部置0
  62   1          //s1按键的检测
  63   1           if(P1_7==0)
  64   1           {//检测松手的几个基本函数 
  65   2           Delay1(10);while(P1_7==0);Delay1(20);KeyNumber=4;}     
  66   1           if(P1_6==0)
  67   1           {//检测松手的几个基本函数 
  68   2           Delay1(10);while(P1_6==0);Delay1(20);KeyNumber=8;}      
  69   1           if(P1_5==0)
  70   1           {//检测松手的几个基本函数 
  71   2           Delay1(10);while(P1_5==0);Delay1(20);KeyNumber=12;}  
  72   1           if(P1_4==0)
  73   1           {//检测松手的几个基本函数 
  74   2           Delay1(10);while(P1_4==0);Delay1(20);KeyNumber=16;}  
  75   1           
  76   1           return KeyNumber;
  77   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    393    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
